
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: qr_scanner_db
      POSTGRES_USER: qr_scanner_user
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qr_scanner_user -d qr_scanner_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - qr-scanner-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://qr_scanner_user:secure_password_123@postgres:5432/qr_scanner_db
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: qr_scanner_db
      DB_USER: qr_scanner_user
      DB_PASSWORD: secure_password_123
      PORT: 3001
      # CORS f√ºr Hetzner Domain erweitert
      CORS_ORIGIN: "https://check-in.home-ki.eu,http://localhost:8080,http://10.0.0.61:8080,http://127.0.0.1:8080"
      # Zeitbegrenzungslogik
      TIME_LIMIT_MINUTES: "5"
      DEVELOPER_TOKEN: ${DEVELOPER_TOKEN:-}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
    command: npm start
    networks:
      - qr-scanner-network

  # Frontend App (Development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/backend
    environment:
      - NODE_ENV=development
      # Verwendet die neue HTTPS API-URL
      - VITE_API_URL=${VITE_API_URL:-https://check-in.home-ki.eu/api}
    depends_on:
      - backend
    command: npm run dev
    networks:
      - qr-scanner-network

  # Frontend App (Production)
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://check-in.home-ki.eu/api
    depends_on:
      - backend
    profiles:
      - production
    networks:
      - qr-scanner-network

volumes:
  postgres_data:

networks:
  qr-scanner-network:
    driver: bridge
